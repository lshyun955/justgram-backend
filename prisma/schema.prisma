generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  id            Int            @id @default(autoincrement())
  user_id       Int
  feed_id       Int
  content       String         @db.VarChar(1000)
  parent_id     Int?
  created_at    DateTime       @default(now()) @db.Timestamp(0)
  updated_at    DateTime       @default(now()) @db.Timestamp(0)
  feed          feed           @relation(fields: [feed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_2")
  comment       comment?       @relation("commentTocomment_parent_id", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_3")
  user          user           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_ibfk_1")
  other_comment comment[]      @relation("commentTocomment_parent_id")
  comment_like  comment_like[]

  @@index([feed_id], map: "feed_id")
  @@index([parent_id], map: "parent_id")
  @@index([user_id], map: "user_id")
}

model comment_like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  comment_id Int
  is_like    Boolean
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  comment    comment  @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_like_ibfk_2")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_like_ibfk_1")

  @@index([comment_id], map: "comment_id")
  @@index([user_id], map: "user_id")
}

model feed {
  id           Int          @id @default(autoincrement())
  user_id      Int
  content      String?      @db.VarChar(2000)
  created_at   DateTime     @default(now()) @db.Timestamp(0)
  updated_at   DateTime     @default(now()) @db.Timestamp(0)
  posting_type String?      @db.VarChar(100)
  user         user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feed_ibfk_1")
  comment      comment[]
  feed_image   feed_image[]
  feed_like    feed_like[]

  @@index([user_id], map: "user_id")
}

model feed_image {
  id      Int     @id @default(autoincrement())
  feed_id Int
  url     String? @db.VarChar(2000)
  feed    feed    @relation(fields: [feed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feed_image_ibfk_1")

  @@index([feed_id], map: "feed_id")
}

model feed_like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  feed_id    Int
  is_like    Boolean
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  feed       feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feed_like_ibfk_2")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "feed_like_ibfk_1")

  @@index([feed_id], map: "feed_id")
  @@index([user_id], map: "user_id")
}

model user {
  id                Int            @id @default(autoincrement())
  user_id           String         @unique(map: "user_id") @db.VarChar(100)
  password          String         @db.VarChar(100)
  name              String         @db.VarChar(100)
  nickname          String         @db.VarChar(100)
  email             String         @db.VarChar(100)
  phone_number      String         @db.VarChar(100)
  profile_image_url String?        @db.VarChar(2000)
  created_at        DateTime       @default(now()) @db.Timestamp(0)
  updated_at        DateTime       @default(now()) @db.Timestamp(0)
  comment           comment[]
  comment_like      comment_like[]
  feed              feed[]
  feed_like         feed_like[]
}
